오전

클래스
클래스와 객체에 대해 알아봄
객체 지향 프로그래밍 (object oriented programmig)
객체를 우선으로 생각해서 프로그래밍 하는 것
클래스 기반의 객체 지향 프로그래밍 언어는 클래스를 기반으로 객체를 만들고 그러한 객체를 우선으로 생각하여 프로그래밍함

# 학생 리스트를 선언합니다.
students = [
    { "name": "윤인성", "korean": 87, "math": 98, "english": 88, "science": 95 },
    { "name": "연하진", "korean": 92, "math": 98, "english": 96, "science": 98 },
    { "name": "구지연", "korean": 76, "math": 96, "english": 94, "science": 90 },
    { "name": "나선주", "korean": 98, "math": 92, "english": 96, "science": 92 },
    { "name": "윤아린", "korean": 95, "math": 98, "english": 98, "science": 98 },
    { "name": "윤명월", "korean": 64, "math": 88, "english": 92, "science": 92 }
]

# 학생을 한 명씩 반복합니다.
print("이름", "총점", "평균", sep="\t")
for student in students :
    # 점수의 총합과 평균을 구합니다.
    score_sum = student["korean"] + student["math"] + \
        student["english"] + student["science"]
    score_average = score_sum / 4
    # 출력합니다.
    print(student["name"], score_sum, score_average, sep="\t")

# 딕셔너리를 리턴하는 함수를 선언
def create_student(name,korean,math,english,science):
    return {
        "name" : name,
        "korean" : korean,
        "math" : math,
        "english" : english,
        "science" : science
    }
students = [
    create_student("윤인성", 87, 98, 88, 95),
    create_student("연하진", 92, 98, 96, 98),
    create_student("구지연", 76, 96, 94, 90),
    create_student("나선주", 98, 92, 96, 92),
    create_student("윤아린", 95, 98, 98, 98),
    create_student("윤명월", 64, 88, 92, 92)
]
print("이름", "총점", "평균", sep="\t")
for student in students:
    print(student_to_string(student))

---------------

클래스 : 객체를 조금 더 효율적으로 생성하기 위해 만들어진 구문
class 클래스 이름 :
     클래스 내용
인스턴스 이름(변수 이름) = 클래스 이름( ) -> 생성자 함수라고 부름

인스턴스(instance)
생성자 사용하여 이러한 클래스 기반으로 만들어긴 객체

# 학생을 한 명씩 반복합니다.
print("이름", "총점", "평균", sep="\t")
for student in students :
    # 점수의 총합과 평균을 구합니다.
    score_sum = student["korean"] + student["math"] + \
        student["english"] + student["science"]
    score_average = score_sum / 4
    # 출력합니다.
    print(student["name"], score_sum, score_average, sep="\t")

# class로 생성하여 object를 관리
class Student:    # class 클래스이름:
    def __init__(self,name,korean,math,english,science):
        self.name = name
        self.korean = korean
        self.math = math
        self.english = english
        self.science = science
        
a_class = Student("윤인성", 87, 98, 88, 95)  # Student 클래스, a_class 인스턴스, 데이터
print(a_class.name, a_class.math, a_class.english)

students = [
    Student("윤인성", 87, 98, 88, 95),
    Student("연하진", 92, 98, 96, 98),
    Student("구지연", 76, 96, 94, 90),
    Student("나선주", 98, 92, 96, 92),
    Student("윤아린", 95, 98, 98, 98),
    Student("윤명월", 64, 88, 92, 92)
]

print("student의 데이터 갯수 : ", len(students))
students[0].name

--------------

클래스 변수 class 구문 바로 아래의 단계에 변수를 선언
클래스명 . 변수명

class Student:
    count = 0

    def __init__(self, name, korean, math, english, science):
        # 인스턴스 변수 초기화
        self.name = name
        self.korean = korean
        self.math = math
        self.english = english
        self.science = science
        
        # 클래스 변수 설정
        Student.count += 1
        print("{}번째 학생이 생성되었습니다.".format(Student.count))
    

# 학생 리스트를 선언합니다.
students = [
    Student("윤인성", 87, 98, 88, 95),
    Student("연하진", 92, 98, 96, 98),
    Student("구지연", 76, 96, 94, 90),
    Student("나선주", 98, 92, 96, 92),
    Student("윤아린", 95, 98, 98, 98),
    Student("윤명월", 64, 88, 92, 92)
]

# 출력합니다.
print()
print("현재 생성된 총 학생 수는 {}명입니다.".format(Student.count))

-----------------------

# 클래스를 선언합니다.
class Student:
    # 클래스 변수
    count = 0
    students = []

    # 클래스 함수
    @classmethod
    def print(cls):
        print("------ 학생 목록 ------")
        print("이름\t총점\t평균")
        for student in cls.students:
            print(str(student))
        print("------- ------- -------")

    # 인스턴스 함수
    def __init__(self, name, korean, math, english, science):
        self.name = name
        self.korean = korean
        self.math = math
        self.english = english
        self.science = science
        Student.count += 1
        Student.students.append(self)

    def get_sum(self):
        return self.korean + self.math +\
            self.english + self.science

    def get_average(self):
        return self.get_sum() / 4

    def __str__(self):
        return "{}\t{}\t{}".format(\
            self.name,\
            self.get_sum(),\
            self.get_average())

Student("윤인성", 87, 98, 88, 95),
Student("연하진", 92, 98, 96, 98),
Student("구지연", 76, 96, 94, 90),
Student("나선주", 98, 92, 96, 92),
Student("윤아린", 95, 98, 98, 98),
Student("윤명월", 64, 88, 92, 92)

Student.print()

-------------------
가비지 컬렉터(garbage collector)
프라이빗 변수 : 변수를 마음대로 사용하는 것 방지

# 모듈을 가져옵니다.
import math

# 클래스를 선언합니다.
class Circle:
    def __init__(self, radius):
        self.__radius = radius
    def get_circumference(self):
        return 2 * math.pi *  self.__radius
    def get_area(self):
        return math.pi * (self.__radius ** 2)
    
    def get_radius(self):
        return self.__radius
    def set_radius(self, value):
        self.__radius = value

# 원의 둘레와 넓이를 구합니다.
circle = Circle(10)
print("# 원의 둘레와 넓이를 구합니다.")
print("원의 둘레:", circle.get_circumference())
print("원의 넓이:", circle.get_area())
print()

# __radius에 접근합니다.
print("# __radius에 접근합니다.")
print(circle.get_radius())
print()
circle.set_radius(3)

--------------

상속
# inheriance
# 부모 클래스를 선언합니다.
class Parent:
    def __init__(self):
        self.value = "테스트"
        print("Parent 클래스의 __init()__메서드가 호출되었습니다.")
    def test(self):
        print("Parent 클래스의 test() 메서드 입니다.")
        
# 자식 클래스를 선언합니다.
class Child(Parent):
    def __init__(self):
        Parent.__init__(self)
        print("child 클래스의 __init__ 메서드가 호출되었습니다.")
        
# 자식 클래스의 인스턴스를 생성하고 부모의 메서드를 호출합니다.
child = Child()  # Child, Parent의 메서드와 값을 가지게 됨
child.test()
print(child.value)

---------------

판다스 입문
# pandas를 활용하여 데이터 처리
import pandas as pd

dict_data = {"a":1, "b":2, "c":3} # "a"는 key 값

ar = pd.Series(dict_data)

print(type(dict_data))    # dictionary를 series 형식으로 변환
print(type(ar))

print(dict_data)
ar

print(dict_data)
print(ar)

print(dict_data["a"], " : ", ar["a"], " : ", ar[0]) # ar에서 "a"는 인덱스명
print(ar[["a", "c"]])
ar[1:2]      # 인덱스 철자로 접근하면 마지막 철자 위치 데이터 불포함
ar["b":"c"]  # 인덱스명으로 접근하면 마지막 데이터 포함
# dictionary를 Series로 변경 : 딕셔너리의 키가 시리즈의 인덱스명이 됨
# 접근은 인덱스명 또는 인덱스 첨자로 접근 가능

dict_data = {"a":[1,2,3], "b":[4,5,6], "c":[7,8,9]} # "a"는 key 값, 데이터프레임의 컬럼명

df = pd.DataFrame(dict_data)
df

dict_data = {"a":[1,2,3], "b":[4,5,6], "c":[7,8,9]} # "a"는 key 값, 데이터프레임의 컬럼명

df = pd.DataFrame(dict_data)
print(df)

# index명을 부여
df1 = pd.DataFrame(dict_data, index=["idx1","idx2","idx3"],)
print("df1 : ", df1)

a_var = [[1,2,3],[4,5,6],[7,8,9]]
df2 = pd.DataFrame(a_var,index=["idx1", "idx2", "idx3"],columns=["a1","b1","c1"])
df2

print(df2.rename(index={"idx1" : "ix1" , "idx2" : "ix2" , "idx3" : "ix3"}, inplace=True))
df2










오후

데이터프레임
행/열 삭제
DataPrame 객체.drop(행 인덱스 또는 배열, )

import pandas as pd

# DataFrame() 함수로 데이터프레임 변환, 변수 df에 저장
exam_data = {"수학" : [ 90, 80, 70 ], "영어" : [98, 89, 95],
            "음악" : [ 85, 95, 100 ], "체육" : [ 100, 90, 90]}

df = pd.DataFrame(exam_data, index = ["서준", "우현", "인아"])
print(df)
print("\n")

# 데이터프레임 df를 복제하여 변수 df2에 저장, df2의 1개 행(row) 삭제
df2 = df[:]
df2.drop("우현", inplace=True)
print(df2)
print("\a")

# 데이터프레임 df를 복제하여 변수 df3에 저장. df3의 2개 행(row) 삭제
df3 = df[:]
df.drop(["우현", "인아"], axis=0, inplace=True)
print(df3)

-----------

exam_data = {"수학" : [ 90, 80, 70 ], "영어" : [98, 89, 95],
            "음악" : [ 85, 95, 100 ], "체육" : [ 100, 90, 90]}

df = pd.DataFrame(exam_data, index = ["서준", "우현", "인아"])

print(df.loc["서준"])
print(df.iloc[0])

print(df.loc["서준" : "인아"])  #  "[인아]"의 자료도 포함
print(df.iloc[0:2]) # 첨자 인덱스 2의 자료는 포함하지 않음

print(df["수학"]) # 컬럼 인덱스로 검색
print(df.수학)

print(df[["수학" , "영어"]])

df.loc["과학"] = [100, 90, 80, 88] # row로 데이터를 추가하는 경우 df.loc[인덱스명] = [값, . . .]
df

# 문 키보드에서 이름과 국어 영어 수학 점수를 입력받아 이름을 인덱스로 저장하는 score dataframe을 생성
# 결과를 화면에 출력

def input_score():
    scores= input("국어 영어 수학 점수 입력 > ").split()
    for i, score in enumerate(scores):
        scores[i] = int(score) # 데이터 타입 변환
    return scores

# 성적 입력 프로그램 작성
import pandas as pd

df = pd.DataFrame(columns=["국어","영어","수학"])  # 칼럼명만 부여한 데이터프레임 생성

while True:
    name = input("이름 입력 quit 종료 > ")
    if name == "quit":
        break
        
    score = input_score()
    df.loc[name] = score # 입력된 name 인덱스로 점수 추가
    
df # 데이터 출력
# 컬럼을 접근하는 방법 df.컬럼명 또는 df[컬럼명]
# row를 접근하는 방법 df.iloc[인덱스], 여러개일때 df.iloc[[1,3,5]], df.iloc[0:3], df.loc["aa":"cc"], df.loc["aa","cc"]

------------

def input_score():
    scores= input("국어 영어 수학 점수 입력 > ").split()
    for i, score in enumerate(scores):
        scores[i] = int(score) # 데이터 타입 변환
    return scores

# 성적 입력 프로그램 작성
import pandas as pd

df = pd.DataFrame(columns=["국어","영어","수학"])  # 칼럼명만 부여한 데이터프레임 생성

while True:
    name = input("이름 입력 quit 종료 > ")
    if name == "quit":
        break
        
    score = input_score()
    df.loc[name] = score # 입력된 name 인덱스로 점수 추가
    
df

------------

import pandas as pd

# DataFrame() 함수로 데이터프레임 변환. 변수 df에 저장 
exam_data = {'이름' : [ '서준', '우현', '인아'],
             '수학' : [ 90, 80, 70],
             '영어' : [ 98, 89, 95],
             '음악' : [ 85, 95, 100],
             '체육' : [ 100, 90, 90]}
df = pd.DataFrame(exam_data)

# '이름' 열을 새로운 인덱스로 지정하고, df 객체에 변경사항 반영
df.set_index('이름', inplace=True)
print(df)
print('\n')

# 데이터프레임 df의 특정 원소 1개 선택 ('서준'의 '음악' 점수)
a = df.loc['서준', '음악']
print(a)
b = df.iloc[0, 2]
print(b)
print('\n')

# 데이터프레임 df의 특정 원소 2개 이상 선택 ('서준'의 '음악', '체육' 점수) 
c = df.loc['서준', ['음악', '체육']]
print(c)
d = df.iloc[0, [2, 3]]
print(d)
e = df.loc['서준', '음악':'체육']
print(e)
f = df.iloc[0, 2:]
print(f)
print('\n')

# df의 2개 이상의 행과 열로부터 원소 선택 ('서준', '우현'의 '음악', '체육' 점수) 
g = df.loc[['서준', '우현'], ['음악', '체육']]
print(g)
h = df.iloc[[0, 1], [2, 3]]
print(h)
i = df.loc['서준':'우현', '음악':'체육']
print(i)
j = df.iloc[0:2, 2:]
print(j)

-------------------

