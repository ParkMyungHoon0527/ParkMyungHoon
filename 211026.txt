★BostonHousing Predict★

from google.colab import files
file_uploaded = files.upload()

import matplotlib.pyplot as plt
import pandas as pd
import tensorflow as tf
data = pd.read_csv("./BostonHousing.csv")

print(data.info())

data.head()

x_data = data.copy()
tf.random.set_seed(100)

y_data = x_data.pop('MEDV')

x_data.head()

y_data.head()

x_data.shape

model = tf.keras.Sequential()
model.add(tf.keras.layers.Dense(64, input_dim=13, activation='sigmoid' ))
model.add(tf.keras.layers.Dense(128, activation='sigmoid'))
model.add(tf.keras.layers.Dense(256, activation='sigmoid'))
model.add(tf.keras.layers.Dense(1))
model.summary()

optimizer = tf.keras.optimizers.SGD(learning_rate=0.04)
loss = tf.keras.losses.mean_squared_error 
metrics = tf.keras.metrics.RootMeanSquaredError()
model.compile(loss=loss, optimizer=optimizer, metrics=[metrics])

result = model.fit(x_data, y_data, epochs=100, batch_size=100)

print(result.history.keys())

loss = result.history['loss']

# loss 그래프
epochs = range(1, len(loss)+1)
plt.subplot(211)
plt.plot(epochs, loss, 'b-', label='Training loss')
plt.title('Training loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

mae = result.history['root_mean_squared_error']
epochs = range(1, len(mae)+1)

# mae그래프
plt.subplot(212)
plt.plot(epochs, mae, 'r-', label='Training mae')
plt.title('Training rmse')
plt.xlabel('Epochs')
plt.ylabel('rmse')
plt.legend()

print(model.evaluate(x_data, y_data))
print("\n Test rmse : %.4f" % (model.evaluate(x_data, y_data)[1]))



★Normalization★

from google.colab import files
file_uploaded = files.upload()

import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

data = pd.read_csv('./test.csv')

print(data.info())

data.head()

a = data['D']

a.shape

x_data = data.copy()

y_data = x_data.pop("D")

# 데이터 분포도 확인하기
sns.pairplot(data[["A","B","C","D"]], diag_kind='hist')
plt.show()

# data의 min, max, mean, std값 구하기
dataset_stats = data.describe()
dataset_stats = dataset_stats.transpose()
#data.min()
#data.max()
#data.mean()

## data normalization
def min_max_norm(x):
  return (x - dataset_stats['min']) / (dataset_stats['max'] - dataset_stats['min'])

def standard_norm(x):
  return (x - dataset_stats['mean']) / dataset_stats['std']

min_max_norm_train_data = min_max_norm(data)
standard_norm_train_data = standard_norm(data)

print("min max : ")
print(min_max_norm_train_data)
print("standard :")
print(standard_norm_train_data)



★BostonHousing Normalization★

from google.colab import files
file_uploaded = files.upload()

data = pd.read_csv('./BostonHousing.csv')

print(data.info())
print(data.head())

x_data = data.copy()

y_data = data.pop('MEDV')

dataset_stats = data.describe()
dataset_stats = dataset_stats.transpose()

## data normalization
def min_max_norm(x):
  return (x - dataset_stats['min']) / (dataset_stats['max'] - dataset_stats['min'])

def standard_norm(x):
  return (x - dataset_stats['mean']) / dataset_stats['std']

normed_train_data = standard_norm(data)

input_layer = tf.keras.layers.Input(shape=(13,))
x = tf.keras.layers.Dense(50, activation='sigmoid')(input_layer)
x = tf.keras.layers.Dense(100, activation='sigmoid')(x)
x = tf.keras.layers.Dense(300, activation='sigmoid')(x)
output_layer = tf.keras.layers.Dense(1, activation=None)(x)

model = tf.keras.Model(inputs=[input_layer], outputs=[output_layer])
model.summary()

loss = tf.keras.losses.mean_squared_error
optimizer = tf.keras.optimizers.SGD(learning_rate=0.007)
metrics = tf.keras.metrics.RootMeanSquaredError()

model.compile(loss=loss,
              optimizer=optimizer,
              metrics=[metrics])

result = model.fit(normed_train_data, y_data, epochs = 1000, batch_size=100)

print(result.history.keys())

loss = result.history['loss']

# loss 그래프
epochs = range(1, len(loss)+1)
plt.subplot(211)
plt.plot(epochs, loss, 'b-', label='Training loss')
plt.title('Training loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

mae = result.history['root_mean_squared_error']
epochs = range(1, len(mae)+1)

# mae그래프
plt.subplot(212)
plt.plot(epochs, mae, 'r-', label='Training mae')
plt.title('Training rmse')
plt.xlabel('Epochs')
plt.ylabel('rmse')
plt.legend()

print("\ Test rmse : %.4f" % (model.evaluate(normed_train_data, y_data)[1]))



★BostonHousing split★

from google.colab import files
file_uploaded = files.upload()

data = pd.read_csv('./BostonHousing.csv')

x_data = data.copy()

ori_y = x_data.pop('MEDV')

from sklearn.model_selection import train_test_split

x_train1, x_test, y_train1, y_test = train_test_split(x_data, ori_y, test_size=0.3, shuffle=True)
x_train, x_valid, y_train, y_valid = train_test_split(x_train1, y_train1, test_size=0.2, shuffle=True)

input_layer = tf.keras.layers.Input(shape=(13,))
x = tf.keras.layers.Dense(50, activation='sigmoid')(input_layer)
x = tf.keras.layers.Dense(100, activation='sigmoid')(x)
x = tf.keras.layers.Dense(300, activation='sigmoid')(x)
out_layer = tf.keras.layers.Dense(1, activation=None)(x)

model = tf.keras.Model(inputs=[input_layer], outputs=[out_layer])
model.summary()

loss = tf.keras.losses.mean_squared_error
optimizer = tf.keras.optimizers.SGD(lr=0.0004)
metrics = tf.keras.metrics.RootMeanSquaredError()
model.compile(loss = loss,
              optimizer = optimizer,
              metrics = [metrics])

result = model.fit(x_train, y_train, epochs = 200, batch_size = 10, validation_data=(x_valid, y_valid))

print(result.history.keys())

loss = result.history['loss']
val_loss = result.history['val_loss']

### loss와 val_loss를 그래프화
epochs = range(1, len(loss) + 1)
plt.subplot(211)  ## 2x1 개의 그래프 중에 1번째
plt.plot(epochs, loss, 'b-', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')
plt.title('Training and validation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

### history에서 mean_absolute_error val_mean_absolute_error key를 가지는 값들만 추출
rmse = result.history['root_mean_squared_error']
val_rmse = result.history['val_root_mean_squared_error']
epochs = range(1, len(rmse) + 1)
### mean_absolute_error val_mean_absolute_error key를 그래프화
plt.subplot(212)  ## 2x1 개의 그래프 중에 2번째
plt.plot(epochs, rmse, 'b-', label='Training rmse')
plt.plot(epochs, val_rmse, 'r', label='Validation rmse')
plt.title('Training and validation rmse')
plt.xlabel('Epochs')
plt.ylabel('rmse')
plt.legend()

print("\n Test rmse: %.4f" % (model.evaluate(x_test, y_test)[1]))

plt.show()



★One hot encoding 실습★

import tensorflow as tf
import pandas as pd
from sklearn.preprocessing import LabelEncoder
import numpy as np

from google.colab import files
file_uploaded = files.upload()

data = pd.read_csv('./one_hot_encording_test.csv', names = ["length", "width", "height", "volume", "class_name"])

x_data = data.copy()
y_data = x_data.pop('class_name')

print("data value : {}".format(x_data))
print("data Label : {}".format(y_data))

# case 1) sklearn
# Label Encoder는 독립 변수가 아닌 종속 변수(라벨)에 대해 사용한다. 
# 문자열이나 정수로된 라벨 값을  0  ~  K−1 까지의 정수로 변환.

e = LabelEncoder()
e.fit(y_data)
print("Label Class String : {}".format(e.classes_))

Y = e.transform(y_data)
print("Label Class int : {}".format(Y))

y_encoded = tf.keras.utils.to_categorical(Y)
print("case 1 One hot label class : {}".format(y_encoded))

print(np.argmax(y_encoded, axis=1).reshape(-1,1)) 
print(y_encoded.shape)

# case 2) pandas
one_hot_label = pd.get_dummies(y_data)
print("case2 one_hot_label : ", one_hot_label)
print(one_hot_label.shape)



★Iris multi classification★

import tensorflow as tf

import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

import pandas as pd

# csv read
data = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/영우_4기_딥러닝/dataset/iris.csv', names = ["sepal_length", "sepal_width", "petal_length", "petal_width", "species"])

x_data = data.copy()
y_data = x_data.pop("species")
X = x_data.copy()

print(y_data)

# 문자열을 숫자로 변환
e = LabelEncoder()
e.fit(y_data)
y = e.transform(y_data)
y_encoded = tf.keras.utils.to_categorical(y)

# train과 test를 분리
x_train1, x_test, y_train1, y_test = train_test_split(X, y_encoded, test_size=0.1, shuffle=True) 
# train set에서 train과 validation 분리
x_train, x_valid, y_train, y_valid = train_test_split(x_train1, y_train1, test_size=0.2, shuffle=True)

print(x_train.shape)
print(y_train.shape)

input_layer = tf.keras.layers.Input(shape=(4,))
x = tf.keras.layers.Dense(16, activation='sigmoid')(input_layer)
x = tf.keras.layers.Dense(32, activation='sigmoid')(x)
output_layer = tf.keras.layers.Dense(3, activation='softmax')(x)

model = tf.keras.models.Model(inputs=[input_layer], outputs = [output_layer])
model.summary()

loss = tf.keras.losses.categorical_crossentropy
optimizer = tf.keras.optimizers.SGD(learning_rate=0.04)
metrics = tf.keras.metrics.categorical_accuracy
model.compile(loss=loss, optimizer=optimizer, metrics=[metrics])

history = model.fit(x_train, y_train, epochs=200, batch_size=50, validation_data=(x_valid, y_valid))

print(history.history.keys())

loss = history.history['loss']
val_loss = history.history['val_loss']

# loss와 val_loss를 그래프
epochs = range(1, len(loss)+1)
plt.subplot(211)
plt.plot(epochs, loss, 'b-', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')
plt.title('Training and validation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

acc = history.history['categorical_accuracy']
val_acc = history.history['val_categorical_accuracy']

plt.subplot(212)  ## 2x1 개의 그래프 중에 2번째
plt.plot(epochs, acc, 'b-', label='Training acc')
plt.plot(epochs, val_acc, 'r', label='Validation acc')
plt.title('Training and validation accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()

print("\n Test Accuracy : %.4f" %(model.evaluate(x_test, y_test)[1]))

model.save('iris_multi_model.h5')



★모델 불러오기★

import tensorflow as tf

import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

import pandas as pd

# csv read
data = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/영우_4기_딥러닝/dataset/iris.csv', names = ["sepal_length", "sepal_width", "petal_length", "petal_width", "species"])

x_data = data.copy()
y_data = x_data.pop("species")
X = x_data.copy()

# 문자열을 숫자로 변환
e = LabelEncoder()
e.fit(y_data)
y = e.transform(y_data)
y_encoded = tf.keras.utils.to_categorical(y)

# train과 test를 분리
x_train1, x_test, y_train1, y_test = train_test_split(X, y_encoded, test_size=0.1, shuffle=True) 
# train set에서 train과 validation 분리
x_train, x_valid, y_train, y_valid = train_test_split(x_train1, y_train1, test_size=0.2, shuffle=True)

model_path = "./{epoch:02d}-{val_loss:.4f}.h5"

model = tf.keras.models.load_model('iris_multi_model.h5')

print('\n Test Accuracy: %.4f' % (model.evaluate(x_test, y_test)[1]))



★모델 중단됐을 때, retrain★

# csv read
data = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/영우_4기_딥러닝/dataset/iris.csv', names = ["sepal_length", "sepal_width", "petal_length", "petal_width", "species"])

x_data = data.copy()
y_data = x_data.pop("species")
X = x_data.copy()

# 문자열을 숫자로 변환
e = LabelEncoder()
e.fit(y_data)
y = e.transform(y_data)
y_encoded = tf.keras.utils.to_categorical(y)

# train과 test를 분리
x_train1, x_test, y_train1, y_test = train_test_split(X, y_encoded, test_size=0.1, shuffle=True) 
# train set에서 train과 validation 분리
x_train, x_valid, y_train, y_valid = train_test_split(x_train1, y_train1, test_size=0.2, shuffle=True)

model = tf.keras.models.load_model('iris_multi_model.h5')
model.summary()

# 모델 컴파일
loss=tf.keras.losses.categorical_crossentropy
optimizer = tf.keras.optimizers.SGD(learning_rate=0.01)
model.compile(loss=loss,
             optimizer=optimizer,
             metrics=[tf.keras.metrics.categorical_accuracy])

result = model.fit(x_train, y_train, epochs=200, batch_size= 50, validation_data = (x_valid, y_valid))
model.save('iris_multi_model2.h5')

print(result.history.keys())

### history에서 loss와 val_loss의 key를 가지는 값들만 추출
loss = result.history['loss']
val_loss = result.history['val_loss']
### loss와 val_loss를 그래프화
epochs = range(1, len(loss) + 1)
plt.subplot(211)  ## 2x1 개의 그래프 중에 1번째
plt.plot(epochs, loss, 'r-', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

### history에서 binary_accuracy와 val_binary_accuracy key를 가지는 값들만 추출
acc = result.history['categorical_accuracy']
val_acc = result.history['val_categorical_accuracy']

### binary_accuracy와 val_binary_accuracy key를 그래프화
plt.subplot(212)  ## 2x1 개의 그래프 중에 2번째
plt.plot(epochs, acc, 'b-', label='Training acc')
plt.plot(epochs, val_acc, 'r', label='Validation acc')
plt.title('Training and validation accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()

print("\n Test Accuracy: %.4f" % (model.evaluate(x_test, y_test)[1]))

